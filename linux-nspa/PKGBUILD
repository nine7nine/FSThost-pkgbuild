# Maintainer: Jordan Johnston <johnstonljordan@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>

pkgbase=linux-nspa
pkgver=5.10.9.arch1
pkgrel=1
pkgdesc='Linux'
_srctag=v${pkgver%.*}-${pkgver##*.}
url="https://git.archlinux.org/linux.git/log/?h=$_srctag"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc kmod libelf pahole cpio perl tar xz
  xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
  git
)
options=('!strip')
_srcname=archlinux-linux
source=(
  "$_srcname::git+https://git.archlinux.org/linux.git?signed#tag=$_srctag"
  config         # the main kernel config file
        # [Fixes/misc] 
        pinctrl_amd-IRQF_NO_THREAD_gpio_irqchip.patch
        designware-i2c_IRQF_NO_THREAD.patch
        # [CLear Linux]
        x86-rdrand_do_sanity_check_on_boot.patch
        0108-smpboot-reuse-timer-calibration.patch
        0113-kernel-time-reduce-ntp-wakeups.patch
        0105-ksm-wakeups.patch
        0104-pci-pme-wakeups.patch
        0101-i8042-decrease-debug-message-level-to-info.patch
        0111-give-rdrand-some-credit.patch
        0124-locking-rwsem-spin-faster.patch
        # [Futex code for wine]
        0001-futex-wait-multiple.patch
        0002-futex-wait-multiple-proton-compatibility.patch
        linux-5.10-Futex2.patch
        # [Graysky, linux-ck] gcc optimization patch
        enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
)
sha256sums=('SKIP'
            '0426d7c003f2ab0d5bef9e70a18cbbf025c7f730db5957fbf06ee72b3f7ca8df'
            '1e5891100e91830f3cd89ddc88b0373d0d617a4aca2ff214aaabc517d08b633d'
            '10fdab4c1deaa6938be3acb992eac686b716ba08e40bff9b838f439494aa49a0'
            '3abe6ced007b908a0755f71804fb760eba781f1120241394bcffe505469f7cbb'
            'e8ec1aa0e67e37b377e5a9d48416ec6e43d90e7121c29ba012096479c66f4880'
            'c2c89d27c260497f2d31ca6dd60821c19cc3f283aaa8903dd19ace78c2011365'
            'f14c11f7d511b5f3fb13e5bcec1f0a8968788396929472ded80c4138aab664c8'
            'c50395c258ce9d73dbad379d677d51daff4b9c3911feb959cb2a1ee4053654c5'
            'f2b93161699370512d4efe0f31b686d99af3a54ab629c78d29d64d4ecd14442b'
            'c1445df6554b80b7b681d4b52ff62527f36b52b1b7d9b59cb68caec967128ced'
            'fbb5cf8e3e44477e06894a8e4e42e44a83682556cbc05bc47334941cbd5fb107'
            'cb37801751ea51bc7e784331132f9390b61e477491f103bec3b48f1e751c79b7'
            'bbbbc90c25659c16f2697b509a15a3969bf0dd277e81b44718a8149e61b51dbc'
            '881a80cd13cccbefea0edc1ee9e0cf5ab5dd36d88bce587f9af12faa9a2941d3'
            '1152904e47fde8f35814e2a7d46fd4f6d974e0ba2a9cc853fc74c2acdb02d960')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

##[My Fixes]

  # In order to use 'threaded interrupts', the below drivers must be patched,
  # as amd-pinctl is not an rt-compliant driver && because designware i2c driver
  # will spike a cpu to around 60-70% non-stop :/

#  msg2 "pinctrl_amd-IRQF_NO_THREAD_gpio_irqchip.patch..."
#  patch -Np1 -i ../"pinctrl_amd-IRQF_NO_THREAD_gpio_irqchip.patch"

#  msg2 "designware-i2c_IRQF_NO_THREAD.patch..."
#  patch -Np1 -i ../"designware-i2c_IRQF_NO_THREAD.patch"
  

##[Clear Linux]

  msg2 "0108-smpboot-reuse-timer-calibration.patch..."
  patch -Np1 -i ../"0108-smpboot-reuse-timer-calibration.patch"

  msg2 "0113-kernel-time-reduce-ntp-wakeups.patch..."
  patch -Np1 -i ../"0113-kernel-time-reduce-ntp-wakeups.patch"

  msg2 "0105-ksm-wakeups.patch..."
  patch -Np1 -i ../"0105-ksm-wakeups.patch"

  msg2 "0104-pci-pme-wakeups.patch..."
  patch -Np1 -i ../"0104-pci-pme-wakeups.patch"

  msg2 "0101-i8042-decrease-debug-message-level-to-info.patch..."
  patch -Np1 -i ../"0101-i8042-decrease-debug-message-level-to-info.patch"

  msg2 "0111-give-rdrand-some-credit.patch..."
  patch -Np1 -i ../"0111-give-rdrand-some-credit.patch"

  msg2 "0124-locking-rwsem-spin-faster.patch..."
  patch -Np1 -i ../"0124-locking-rwsem-spin-faster.patch"
  
# Implement futex-wait-multiple.  

  msg2 "0001-futex-wait-multiple.patch"
  patch -Np1 -i ../"0001-futex-wait-multiple.patch"
  
  msg2 "0002-futex-wait-multiple-proton-compatibility.patch"
  patch -Np1 -i ../"0002-futex-wait-multiple-proton-compatibility.patch"
  
  msg2 "linux-5.10-Futex2.patch"
  patch -Np1 -i ../"linux-5.10-Futex2.patch"

##[Graysky, linux-ck]

  # https://github.com/graysky2/kernel_gcc_patch

  msg2 "enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch ..."
  patch -Np1 -i ../"enable_additional_cpu_optimizations_for_gcc_v10.1+_kernel_v5.8+.patch"
  
  echo "Setting config..."
  cp ../config .config
  make olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  make all -j6
  make htmldocs
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)
  replaces=(virtualbox-guest-modules-arch wireguard-arch)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers" "$pkgbase-docs")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
