--- a/dlls/sechost/service.c.orig	2020-06-08 03:51:48.217580986 -0400
+++ b/dlls/sechost/service.c	2020-06-08 03:51:34.305897590 -0400
@@ -36,6 +36,8 @@
 
 #include "svcctl.h"
 #include "plugplay.h"
+#include <sys/time.h>
+#include <stdlib.h>
 
 WINE_DEFAULT_DEBUG_CHANNEL(service);
 
@@ -1822,6 +1822,11 @@
     HANDLE wait_handles[MAXIMUM_WAIT_OBJECTS];
     UINT wait_services[MAXIMUM_WAIT_OBJECTS];
     struct dispatcher_data *disp = heap_alloc( sizeof(*disp) );
+    WCHAR en[] = { 's','r','v','t','h','r','d','X','X','X','X',0 };
+    int hashNum;
+    WCHAR *hashLoc = en + 7;
+    unsigned int seed;
+    struct timeval tv;
 
     disp->manager = OpenSCManagerW( NULL, NULL, SC_MANAGER_CONNECT );
     if (!disp->manager)
@@ -1841,7 +1846,21 @@
         return FALSE;
     }
 
-    service_event = CreateEventW( NULL, FALSE, FALSE, NULL );
+    // Hash the name to avoid collisions between services.exe and host app
+    gettimeofday(&tv, 0);
+    seed = (unsigned int)(tv.tv_sec * 1000 + tv.tv_usec / 1000);
+    while (*hashLoc != 0) {
+        hashNum = (rand_r(&seed) >> 16) % 62;
+        if (hashNum < 10)
+            *hashLoc = '0'+hashNum;
+        else if (hashNum < 36)
+            *hashLoc = 'a'+hashNum-10;
+        else
+            *hashLoc = 'A'+hashNum-36;
+        hashLoc++;
+   }
+
+    service_event = CreateEventW( NULL, FALSE, FALSE, en );
     stop_service  = FALSE;
 
     /* FIXME: service_control_dispatcher should be merged into the main thread */
--- a/dlls/rpcrt4/rpc_transport.c.orig	2020-06-07 23:01:09.448998137 -0400
+++ b/dlls/rpcrt4/rpc_transport.c	2020-06-07 23:00:44.567851056 -0400
@@ -1498,7 +1498,26 @@
 
 static RpcServerProtseq *rpcrt4_protseq_sock_alloc(void)
 {
+    WCHAR n[] = { 'r','p','c','m','e','X','X','X','X',0 };
     RpcServerProtseq_sock *ps = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*ps));
+    int hashNum;
+    WCHAR *hashLoc = n + 5;
+    unsigned int seed;
+    struct timeval tv;
+
+    // Hash the name to avoid collisions between services.exe and host app
+    gettimeofday(&tv, 0);
+    seed = (unsigned int)(tv.tv_sec * 1000 + tv.tv_usec / 1000);
+    while (*hashLoc != 0) {
+        hashNum = (rand_r(&seed) >> 16) % 62;
+        if (hashNum < 10)
+            *hashLoc = '0'+hashNum;
+        else if (hashNum < 36)
+            *hashLoc = 'a'+hashNum-10;
+        else
+            *hashLoc = 'A'+hashNum-36;
+        hashLoc++;
+    }
     if (ps)
     {
         static BOOL wsa_inited;
@@ -1510,7 +1529,7 @@
              * making accesses to wsa_inited thread-safe */
             wsa_inited = TRUE;
         }
-        ps->mgr_event = CreateEventW(NULL, FALSE, FALSE, NULL);
+        ps->mgr_event = CreateEventW(NULL, FALSE, FALSE, n);
     }
     return &ps->common;
 }
--- a/programs/winedevice/device.c.orig	2020-06-07 23:09:14.153242270 -0400
+++ b/programs/winedevice/device.c	2020-06-07 23:09:01.696152367 -0400
@@ -124,6 +124,7 @@
     static const WCHAR win32kW[]   = {'w','i','n','3','2','k','.','s','y','s',0};
     static const WCHAR dxgkrnlW[]  = {'d','x','g','k','r','n','l','.','s','y','s',0};
     static const WCHAR dxgmms1W[]  = {'d','x','g','m','m','s','1','.','s','y','s',0};
+    static const WCHAR en[] = { 'w','d','s','e',0 };
     static const WCHAR *stubs[] = { win32kW, dxgkrnlW, dxgmms1W };
     const WCHAR *service_group = (argc >= 2) ? argv[1] : argv[0];
     LDR_DATA_TABLE_ENTRY *ldr;
@@ -148,7 +149,7 @@
     }
     LdrUnlockLoaderLock( 0, magic );
 
-    if (!(stop_event = CreateEventW( NULL, TRUE, FALSE, NULL )))
+    if (!(stop_event = CreateEventW( NULL, TRUE, FALSE, en )))
         return;
     if (!(manager_handle = OpenSCManagerW( NULL, NULL, SC_MANAGER_CONNECT )))
         return;
@@ -159,6 +160,8 @@
     set_service_status( service_handle, SERVICE_RUNNING,
                         SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN );
 
+    stop_event = CreateEventW( NULL, TRUE, FALSE, en );
+
     wine_ntoskrnl_main_loop( stop_event );
 
     TRACE( "service group %s stopped\n", wine_dbgstr_w(service_group) );
