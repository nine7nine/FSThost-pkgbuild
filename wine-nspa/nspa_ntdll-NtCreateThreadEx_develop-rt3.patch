 - use PTHREAD_PRIO_PROTECT
 
 - stop subtraction (-1) from WINE_RT_PRIO and wineserver.
 
 - decrement RT priority by -2, consistently.
 
 - insert sync threads below TIME_CRITICAL threads, but above HIGHEST.
 
 NOTE: although this code barely touches ntdll, it's still apart of the same 
       patchwork.
 
 johnstonljordan <AT> gmail <DOT> com

--- a/dlls/ntdll/thread.c.orig	2020-07-10 23:35:26.962345024 -0400
+++ b/dlls/ntdll/thread.c	2020-07-10 23:36:37.602828297 -0400
@@ -98,7 +98,7 @@ int ntdll_set_sync_realtime (pthread_t p
         thread_apc_priority = apc_priority;
     }
 	struct sched_param param;	
-	param.sched_priority = thread_apc_priority -6;
+	param.sched_priority = thread_apc_priority -4;
 
 	return pthread_setschedparam (pthread_id, wine_rt_policy, &param);
 }
@@ -644,7 +644,7 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     pthread_attr_setschedpolicy (&pthread_attr, wine_rt_policy);
     pthread_attr_setschedparam (&pthread_attr, &parm);
     pthread_mutexattr_t mattr;
-    pthread_mutexattr_setprotocol(&mattr, PTHREAD_PRIO_INHERIT);
+    pthread_mutexattr_setprotocol(&mattr, PTHREAD_PRIO_PROTECT);
     // glibc get the program name
     extern char *__progname;
     // Add runtime option for checking thread info.
--- a/server/scheduler.c.orig	2020-07-10 23:38:25.482584790 -0400
+++ b/server/scheduler.c	2020-07-10 23:38:35.546656369 -0400
@@ -86,7 +86,7 @@ void init_scheduler( void )
     } 
 
     /* change the wineserver priority */
-    if ((priority = get_priority( "WINE_RT_PRIO", min, max -1)) != -1)
+    if ((priority = get_priority( "WINE_RT_PRIO", min, max)) != -1)
     {       
         struct sched_param param;
         memset( &param, 0, sizeof(param) );
@@ -154,13 +154,13 @@ void set_scheduler_priority( struct thre
     if ((thread->priority = PROCESS_PRIOCLASS_REALTIME) && (thread->priority != THREAD_PRIORITY_TIME_CRITICAL ||
          THREAD_PRIORITY_NORMAL || THREAD_PRIORITY_BELOW_NORMAL || THREAD_PRIORITY_IDLE ))
     {
-        param.sched_priority = thread_base_priority -1;
+        param.sched_priority = thread_base_priority;
     }
     // Hardcoded to SCHED_FIFO just for TIME_CRITICAL threads.
     if ((thread->priority = PROCESS_PRIOCLASS_REALTIME && THREAD_PRIORITY_TIME_CRITICAL ))
     {
         wine_rt_policy = SCHED_FIFO;
-        param.sched_priority = thread_base_priority -1;
+        param.sched_priority = thread_base_priority;
     } 
     else
     {
--- a/server/thread.c.orig	2020-07-10 23:33:39.137629593 -0400
+++ b/server/thread.c	2020-07-10 23:33:51.005706874 -0400
@@ -749,7 +749,7 @@ static int get_unix_priority( int priori
     // RT priority for threads must be below kernel-mode APC, TIME_CRITICAL threads and Wineserver.
     if ((base_priority = get_priority( "WINE_RT_PRIO", min, max )) != -1)
     {
-        thread_base_priority = base_priority - 1;
+        thread_base_priority = base_priority;
     }
            
     // SCHED_FIFO/SCHED_RR:
@@ -835,8 +835,8 @@ static int get_unix_priority( int priori
         case THREAD_PRIORITY_LOWEST: return 0;
         case THREAD_PRIORITY_BELOW_NORMAL: return 0;
         case THREAD_PRIORITY_NORMAL: return 0;
-        case THREAD_PRIORITY_ABOVE_NORMAL: return -4 + thread_base_priority;
-        case THREAD_PRIORITY_HIGHEST: return -3 + thread_base_priority;
+        case THREAD_PRIORITY_ABOVE_NORMAL: return -8 + thread_base_priority;
+        case THREAD_PRIORITY_HIGHEST: return -6 + thread_base_priority;
         case 3: return -2 + thread_base_priority;
         case 4: return -2 + thread_base_priority;
         case 5: return -2 + thread_base_priority;
