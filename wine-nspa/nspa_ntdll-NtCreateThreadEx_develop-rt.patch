 - move code around (fixes 1 C89 warning - but the rest I won't fix. they kinda 
   need to stay the way they are; to make it all work.
 
 - i messed up the last patch, forgot the thread_data->pthread_id bit. This is
   set in the muse (dead) code, but it actually belongs in my patchset now, with
   recent changes... So it needs to be extracted. 
   
 - added a bit of filtering for unsupported threads. 
 
 - reformatted fprintf output. Looks cleaner, easier to read now.
 
 I'll squash this with it's sister (the NtCreateThreadEx patch) -- but likely 
 not until I do three things;
 
 1). split the APC threads from the other (validSyncThread) pthreads.
 2). implement setting their priorities, separately.
 3). add an override to set them independently (for testing), as some of the 
     threads being set as MAX priority - should be lower. 
     
 At that point, a squash is in order. Then comes step four;
 
 4). Test. test. test. make everyone play nice (threads). then kill #3 and let 
 wine set everything properly / no user interaction.
 
 then squash again. - for a more complete patch.
 
 johnstonljordan <AT> gmail <DOT> com

--- a/dlls/ntdll/thread.c	2020-07-10 00:05:58.911754450 -0400
+++ b/thread.c	2020-07-09 23:16:29.119269000 -0400
@@ -23,6 +23,7 @@
 
 #include <assert.h>
 #include <stdarg.h>
+#include <unistd.h>
 #include <string.h>
 #include <stdio.h>
 #include <limits.h>
@@ -642,6 +643,10 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     int wine_rt_policy = 0;
     pthread_attr_setschedpolicy (&pthread_attr, wine_rt_policy);
     pthread_attr_setschedparam (&pthread_attr, &parm);
+    // glibc get the program name
+    extern char *__progname;
+    // Add runtime option for checking thread info.
+    const char *threadInfo = getenv("NSPA_THREAD_INFO");
 #endif
     BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
     CLIENT_ID *id = NULL;
@@ -780,6 +785,9 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     thread_data->esync_queue_fd = 0;
     thread_data->esync_apc_fd = 0;
     thread_data->fsync_apc_idx = 0;
+#if NSPA_RT_SYNC
+    thread_data->pthread_id  =  0;
+#endif
 
     pthread_attr_init( &pthread_attr );
     pthread_attr_setstack( &pthread_attr, teb->DeallocationStack,
@@ -807,25 +815,51 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     // 
     // Catch all Synchronization Threads;
     pthread_t validSyncThread = (thread_data->fsync_apc_idx || thread_data->esync_apc_fd ||
-                                 thread_data->esync_queue_fd);
+                                 thread_data->esync_queue_fd || thread_data->pthread_id);
     if (validSyncThread == 0) {
         int i;
         for (i = 0; i < 100; ++i) {
             validSyncThread = (thread_data->fsync_apc_idx || thread_data->esync_apc_fd ||
-                               thread_data->esync_queue_fd);
+                               thread_data->esync_queue_fd || thread_data->pthread_id);
             if (validSyncThread == 0)
-                usleep(100);
+                usleep(300);
         }
     }
     if (validSyncThread != 0) {
-        // this may be redundant, but set PTHREAD_EXPLICIT_SCHED for the
-        // esync/fsync kernel-mode APC threads.
-        pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
+        // Fail on / filter out unsupported threads;
+        if (handle == GetCurrentThread() && validSyncThread != thread_data->fsync_apc_idx || 
+            thread_data->esync_apc_fd || thread_data->esync_queue_fd) {
+            fprintf(stderr, "==> PROGRAM NAME: %s <==\n", __progname);
+            fprintf(stderr, "Windows Thread ID: %d\n", GetCurrentThreadId());
+            fprintf(stderr, "Invalid Thread => GetCurrentThread(): %p\n", GetCurrentThread());
+            return status;
+        }
+
         // set RT for sync threads
-    	ntdll_set_sync_realtime(validSyncThread, wine_rt_policy, priority);
+    	ntdll_set_sync_realtime(pthread_self(), wine_rt_policy, priority);
+    	
+        //  if getenv("NSPA_THREAD_INFO") is set.	
+        if (threadInfo) {
+     	    struct sched_param param;
+    	    // if sched_getparam() returns zero, lets go;
+    	    if (sched_getparam( gettid(), &param ) == 0) {
+    	    
+    	    // Get the current thread priority
+    	    sched_getparam(0, &param);
+    	    
+    	    // note: policy isn't of interest here. it's FIFO or RR.
+    	    // if 0 is returned - it's SCHED_OTHER.
+    	    
+    	    // Thread / Process Info.
+           fprintf(stderr, "--------------------------------------------\n");
+           fprintf(stderr, "==> PROGRAM NAME: %s <==\n", __progname);
+           fprintf(stderr, "Pthread Thread Priority: %d\n", param.sched_priority);
+           fprintf(stderr, "Windows Thread ID: %d\n", GetCurrentThreadId());
+    	    fprintf(stderr, "NtCreateThreadEx => pthread_self(): %ld\n", pthread_self());
+    	    fprintf(stderr, "NtCreateThreadEx => glibc gettid(): %d\n", gettid());
+    	    }
     	}
-    else
-        WARN("no RT sync for thread\n");
+    }
 #endif
 
     return STATUS_SUCCESS;
