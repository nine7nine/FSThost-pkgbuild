 - add runtime NSPA_THREAD_INFO debug option. Nothing fancy, just returns;
 
   Program Name
   Pthread Priority
   Windows Thread ID
   pthread_self()
   glibc gettid()
   
 - linux tids and pthread_ids aren't the same thing, so it's helpful to know
 both, along with the Windows Thread ID. RT Policy isn't of note, as I can tell
 a threads policy, based on it's priority.
 
 - this may need to be disabled on distros shipping older glibc.
   
--- a/dlls/ntdll/thread.c.orig	2020-07-16 02:06:23.107885070 -0400
+++ b/dlls/ntdll/thread.c	2020-07-16 02:06:49.305568619 -0400
@@ -23,6 +23,7 @@
 
 #include <assert.h>
 #include <stdarg.h>
+#include <unistd.h>
 #include <string.h>
 #include <stdio.h>
 #include <limits.h>
@@ -644,6 +645,10 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
     pthread_attr_setschedparam (&pthread_attr, &parm);
     pthread_mutexattr_t mattr;
     pthread_mutexattr_setprotocol(&mattr, PTHREAD_PRIO_PROTECT);
+    // glibc get the program name
+    extern char *__progname;
+    // Add runtime option for checking thread info.
+    const char *threadInfo = getenv("NSPA_THREAD_INFO");
 #endif
     BOOLEAN suspended = !!(flags & THREAD_CREATE_FLAGS_CREATE_SUSPENDED);
     CLIENT_ID *id = NULL;
@@ -827,12 +832,40 @@ NTSTATUS WINAPI NtCreateThreadEx( HANDLE
         // Fail on / filter out unsupported threads;
         if (handle == GetCurrentThread() && (validSyncThread != thread_data->fsync_apc_idx || 
             thread_data->esync_apc_fd || thread_data->esync_queue_fd)) {
+            //  if getenv("NSPA_THREAD_INFO") is set.
+            if (threadInfo) {
+                fprintf(stderr, "==> PROGRAM NAME: %s <==\n", __progname);
+                fprintf(stderr, "Windows Thread ID: %d\n", GetCurrentThreadId());
+                fprintf(stderr, "Invalid Thread => GetCurrentThread(): %p\n", GetCurrentThread());
+            }
             return status;
         }
 
         // set RT for sync threads
         pthread_attr_setinheritsched(&pthread_attr, PTHREAD_EXPLICIT_SCHED);
         ntdll_set_sync_realtime(pthread_self(), wine_rt_policy, priority);
+    	
+        //  if getenv("NSPA_THREAD_INFO") is set.	
+        if (threadInfo) {
+            struct sched_param param;
+            // if sched_getparam() returns zero, lets go;
+            if (sched_getparam( gettid(), &param ) == 0) {
+    	    
+            // Get the current thread priority
+            sched_getparam(0, &param);
+    	    
+            // note: policy isn't of interest here. it's FIFO or RR.
+            // if 0 is returned - it's SCHED_OTHER.
+    	    
+            // Thread / Process Info.
+            fprintf(stderr, "--------------------------------------------\n");
+            fprintf(stderr, "==> PROGRAM NAME: %s <==\n", __progname);
+            fprintf(stderr, "Pthread Thread Priority: %d\n", param.sched_priority);
+            fprintf(stderr, "Windows Thread ID: %d\n", GetCurrentThreadId());
+            fprintf(stderr, "NtCreateThreadEx => pthread_self(): %ld\n", pthread_self());
+            fprintf(stderr, "NtCreateThreadEx => glibc gettid(): %d\n", gettid());
+            }
+        }
     }
 #endif
