 - Tweak hash_short_file_name() hash algorithm.
 
 This supposedly helped with avoiding hash collisions in the old wine-muse builds.
 
 johnstonljordan <AT> gmail <DOT> com

diff -pur a/dlls/ntdll/directory.c b/dlls/ntdll/directory.c
--- a/dlls/ntdll/directory.c	2020-06-27 12:48:53.843362000 -0400
+++ b/dlls/ntdll/directory.c	2020-06-30 03:00:14.225420162 -0400
@@ -1307,7 +1307,7 @@ static ULONG hash_short_file_name( const
 
     LPCWSTR p, ext, end = name->Buffer + name->Length / sizeof(WCHAR);
     LPWSTR dst;
-    unsigned short hash;
+    unsigned int hash;
     int i;
 
     /* Compute the hash code of the file name */
@@ -1315,8 +1315,8 @@ static ULONG hash_short_file_name( const
     /* insert a better algorithm here... */
     if (!is_case_sensitive)
     {
-        for (p = name->Buffer, hash = 0xbeef; p < end - 1; p++)
-            hash = (hash<<3) ^ (hash>>5) ^ RtlDowncaseUnicodeChar(*p) ^ (RtlDowncaseUnicodeChar(p[1]) << 8);
+        for (p = name->Buffer, hash = 0xbeef; p < end - 2; p++)
+            hash = (hash<<3) ^ (hash>>5) ^ RtlDowncaseUnicodeChar(*p) ^ (RtlDowncaseUnicodeChar(p[1]) << 8) ^ (RtlDowncaseUnicodeChar(p[2]) << 16);
         hash = (hash<<3) ^ (hash>>5) ^ RtlDowncaseUnicodeChar(*p); /* Last character */
     }
     else
@@ -1329,16 +1329,17 @@ static ULONG hash_short_file_name( const
     /* Find last dot for start of the extension */
     for (p = name->Buffer + 1, ext = NULL; p < end - 1; p++) if (*p == '.') ext = p;
 
-    /* Copy first 4 chars, replacing invalid chars with '_' */
-    for (i = 4, p = name->Buffer, dst = buffer; i > 0; i--, p++)
+    /* Copy first 3 chars, replacing invalid chars with '_' */
+    for (i = 3, p = name->Buffer, dst = buffer; i > 0; i--, p++)
     {
         if (p == end || p == ext) break;
         *dst++ = is_invalid_dos_char(*p) ? '_' : *p;
     }
-    /* Pad to 5 chars with '~' */
+    /* Pad to 4 chars with '~' */
     while (i-- >= 0) *dst++ = '~';
 
     /* Insert hash code converted to 3 ASCII chars */
+    *dst++ = hash_chars[(hash >> 15) & 0x1f];
     *dst++ = hash_chars[(hash >> 10) & 0x1f];
     *dst++ = hash_chars[(hash >> 5) & 0x1f];
     *dst++ = hash_chars[hash & 0x1f];
